From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joyee Cheung <joyeec9h3@gmail.com>
Date: Wed, 2 Aug 2023 04:14:35 +0200
Subject: src: cast v8::Object::GetInternalField() return value to v8::Value
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In preparation of https://chromium-review.googlesource.com/c/v8/v8/+/4707972
which changes the return value to v8::Data.

PR-URL: https://github.com/nodejs/node/pull/48943
Reviewed-By: Juan José Arboleda <soyjuanarbol@gmail.com>
Reviewed-By: Mohammed Keyvanzadeh <mohammadkeyvanzade94@gmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>
Reviewed-By: Chengzhong Wu <legendecas@gmail.com>
Reviewed-By: Stephen Belanger <admin@stephenbelanger.com>
Reviewed-By: Jiawen Geng <technicalcute@gmail.com>

diff --git a/src/base_object-inl.h b/src/base_object-inl.h
index f003f1390b864f2f3874ec144b413fe5cec2dc56..0148c75427985e2ff034fafb15f3ac4604b48734 100644
--- a/src/base_object-inl.h
+++ b/src/base_object-inl.h
@@ -127,7 +127,8 @@ template <int Field>
 void BaseObject::InternalFieldGet(
     v8::Local<v8::String> property,
     const v8::PropertyCallbackInfo<v8::Value>& info) {
-  info.GetReturnValue().Set(info.This()->GetInternalField(Field));
+  info.GetReturnValue().Set(
+      info.This()->GetInternalField(Field).As<v8::Value>());
 }
 
 template <int Field, bool (v8::Value::* typecheck)() const>
diff --git a/src/module_wrap.cc b/src/module_wrap.cc
index e0f1b2d51f3055b2250f2c0dc1dfd1048b645dd9..d2d9e06da8da068bb53f8d9a656e912d8b1fff3d 100644
--- a/src/module_wrap.cc
+++ b/src/module_wrap.cc
@@ -77,7 +77,7 @@ ModuleWrap::~ModuleWrap() {
 }
 
 Local<Context> ModuleWrap::context() const {
-  Local<Value> obj = object()->GetInternalField(kContextObjectSlot);
+  Local<Value> obj = object()->GetInternalField(kContextObjectSlot).As<Value>();
   if (obj.IsEmpty()) return {};
   return obj.As<Object>()->GetCreationContext().ToLocalChecked();
 }
@@ -685,7 +685,9 @@ MaybeLocal<Value> ModuleWrap::SyntheticModuleEvaluationStepsCallback(
 
   TryCatchScope try_catch(env);
   Local<Function> synthetic_evaluation_steps =
-      obj->object()->GetInternalField(kSyntheticEvaluationStepsSlot)
+      obj->object()
+          ->GetInternalField(kSyntheticEvaluationStepsSlot)
+          .As<Value>()
           .As<Function>();
   obj->object()->SetInternalField(
       kSyntheticEvaluationStepsSlot, Undefined(isolate));
diff --git a/src/node_file.cc b/src/node_file.cc
index 4993da585322dbe9f4faec986ae36d4f215b35af..c0507777273cff6ef781dd9e09e1423e92a431aa 100644
--- a/src/node_file.cc
+++ b/src/node_file.cc
@@ -439,7 +439,7 @@ MaybeLocal<Promise> FileHandle::ClosePromise() {
   Local<Context> context = env()->context();
 
   Local<Value> close_resolver =
-      object()->GetInternalField(FileHandle::kClosingPromiseSlot);
+      object()->GetInternalField(FileHandle::kClosingPromiseSlot).As<Value>();
   if (!close_resolver.IsEmpty() && !close_resolver->IsUndefined()) {
     CHECK(close_resolver->IsPromise());
     return close_resolver.As<Promise>();
diff --git a/src/node_task_queue.cc b/src/node_task_queue.cc
index 5d0e2b0d4c7ba16f920176ac42a33d70610f273e..1a0cb082a2534f17233d0557e95837b2ce79d43b 100644
--- a/src/node_task_queue.cc
+++ b/src/node_task_queue.cc
@@ -50,7 +50,7 @@ static Maybe<double> GetAssignedPromiseWrapAsyncId(Environment* env,
   // be an object. If it's not, we just ignore it. Ideally v8 would
   // have had GetInternalField returning a MaybeLocal but this works
   // for now.
-  Local<Value> promiseWrap = promise->GetInternalField(0);
+  Local<Value> promiseWrap = promise->GetInternalField(0).As<Value>();
   if (promiseWrap->IsObject()) {
         Local<Value> maybe_async_id;
     if (!promiseWrap.As<Object>()->Get(env->context(), id_symbol)
diff --git a/src/node_zlib.cc b/src/node_zlib.cc
index fac116f9e6b3e23451c812be0a123fe6368fb3df..0c4ae0fc794347be49502977d8a375ff1007a605 100644
--- a/src/node_zlib.cc
+++ b/src/node_zlib.cc
@@ -423,7 +423,8 @@ class CompressionStream : public AsyncWrap, public ThreadPoolWork {
     UpdateWriteResult();
 
     // call the write() cb
-    Local<Value> cb = object()->GetInternalField(kWriteJSCallback);
+    Local<Value> cb =
+        object()->GetInternalField(kWriteJSCallback).template As<Value>();
     MakeCallback(cb.As<Function>(), 0, nullptr);
 
     if (pending_close_)
diff --git a/src/stream_base.cc b/src/stream_base.cc
index f1769ca52970fed7267fed4df29aee0803faa859..b9dfc645e2b49c73822fc7277f296d028699de05 100644
--- a/src/stream_base.cc
+++ b/src/stream_base.cc
@@ -470,8 +470,9 @@ MaybeLocal<Value> StreamBase::CallJSOnreadMethod(ssize_t nread,
 
   AsyncWrap* wrap = GetAsyncWrap();
   CHECK_NOT_NULL(wrap);
-  Local<Value> onread = wrap->object()->GetInternalField(
-      StreamBase::kOnReadFunctionField);
+  Local<Value> onread = wrap->object()
+                            ->GetInternalField(StreamBase::kOnReadFunctionField)
+                            .As<Value>();
   CHECK(onread->IsFunction());
   return wrap->MakeCallback(onread.As<Function>(), arraysize(argv), argv);
 }
